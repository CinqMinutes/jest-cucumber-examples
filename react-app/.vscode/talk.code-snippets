{
  // Place your react-app workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Pure addition": {
    "scope": "typescript",
    "prefix": "addPure",
    "body": [
      "class AppNumbers {",
      "  private nombres: Array<number> = [];",
      "",
      "  ajoute = (nombre: number) => this.nombres.push(nombre);",
      "  somme = () => this.nombres.reduce((p, n) => p + n);",
      "}",
      "",
      "export default AppNumbers;"
    ]
  },
  "Circle Material on App test": {
    "scope": "typescript, typescriptreact",
    "prefix": "describeAppMaterialCircle",
    "body": [
      "describe('Material UI', () => {",
      "  test('Doit contenir le MuiThemeProvider', () => {",
      "    const wrapper = mount(<App />);",
      "    expect(wrapper.find(MuiThemeProvider).length).toBe(1);",
      "  });",
      "",
      "  test('Doit contenir un cercle de chargement au centre', () => {",
      "    const wrapper = mount(<App />);",
      "    expect(wrapper.find('.perfect-middle').length).toBe(1);",
      "    expect(wrapper.find(CircularProgress).length).toBe(1);",
      "    expect(wrapper.find(CircularProgress).prop('size')).toBe(180);",
      "    expect(wrapper.find(CircularProgress).prop('thickness')).toBe(5);",
      "  });",
      "});"
    ]
  },
  "Perfect Middle": {
    "scope": "scss, css",
    "prefix": ".perfect-middle",
    "body": [
      ".perfect-middle {",
      "  position: fixed;",
      "  top: 50%;",
      "  left: 50%;",
      "  transform: translate(-50%, -50%);",
      "}"
    ]
  },
  "Perfect Middle App": {
    "scope": "typescript, typescriptreact",
    "prefix": "appPerfectMiddle",
    "body": [
      "const App: React.FC = () => (",
      "  <MuiThemeProvider>",
      "    <div className=\"perfect-middle\">",
      "      <CircularProgress size={180} thickness={5} />",
      "    </div>",
      "  </MuiThemeProvider>",
      ");"
    ]
  },
  "Feature Meteo": {
    "scope": "feature",
    "prefix": "featureMeteo",
    "body": [
      "Feature: Météo",
      "",
      "  Permet d'afficher la météo",
      "",
      "Scenario: Aller sur la page permet de saisir le lieu",
      "    When Je vais sur la route '/meteo/France/Lille'",
      "    Then J'obtiens la 'description' météo 'nuageux'"
    ]
  },

  "Load Feature Meteo": {
    "scope": "typescript, typescriptreact",
    "prefix": "loadFeatureMeteo",
    "body": [
      "import React from 'react';",
      "import { defineFeature, loadFeature } from 'jest-cucumber';",
      "import AppRouter from '../router';",
      "import { mount, ReactWrapper } from 'enzyme';",
      "",
      "import { MemoryRouter as Router } from 'react-router-dom';",
      "",
      "const feature = loadFeature('./src/meteo/meteo.feature');",
      "",
      "defineFeature(feature, test => {",
      "  let wrapper: ReactWrapper;",
      "  test('Aller sur la page permet de saisir le lieu', ({ when, then }) => {",
      "    when(/^Je vais sur la route '(.*)'$/, url => {",
      "      wrapper = mount(",
      "        <Router initialEntries={[url]}>",
      "          <AppRouter />",
      "        </Router>",
      "      );",
      "    });",
      "    then(/^J'obtiens la '(.*)' météo '(.*)'$/, (nom, valeur) => {",
      "      expect(wrapper.find(`#${nom}`)).toHaveLength(1);",
      "      expect(wrapper.find(`#${nom}`).text()).toBe(valeur);",
      "    });",
      "  });",
      "});"
    ]
  }
}
